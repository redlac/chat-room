{"version":3,"sources":["MessageListItem.jsx","MessageList.jsx","MessageInput.jsx","SetNickname.jsx","ChatWindow.jsx","App.js","serviceWorker.js","index.js"],"names":["MessageListItem","props","classes","makeStyles","theme","nickname","color","nickNameColor","useStyles","ListItem","divider","ref","bottomMessageRef","ListItemAvatar","Avatar","alt","src","ListItemText","Typography","className","component","message","name","text","MessageList","List","messages","length","map","index","key","variant","align","MessageInput","Grid","container","direction","justify","alignItems","spacing","item","xs","TextField","id","label","size","fullWidth","onChange","e","inputType","event","handleChange","Button","endIcon","onClick","sendMessage","SetNickname","ChatWindow","Divider","App","useState","setMessages","setMessage","messageReceived","setMessageReceived","setNickname","setNickNameColor","bottomMessage","useRef","useEffect","socketIOClient","on","data","updatedMessages","push","i","Math","floor","random","getRandomColor","console","log","current","scrollIntoView","target","value","emit","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.b69bab1f.chunk.js","sourcesContent":["import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItem from '@material-ui/core/ListItem';\nimport Typography from '@material-ui/core/Typography';\nimport './scss/chat-window-styles.scss';\n\n/**\n * Component that holds a single chat message. \n * @param {props} props from MessageList.jsx\n */\nexport function MessageListItem(props) {\n\n    const useStyles = makeStyles((theme) => ({\n\n        nickname: {\n            color: props.nickNameColor, \n        },\n    }));\n\n    const classes = useStyles();\n\n    return (\n        <ListItem divider ref={props.bottomMessageRef}> \n                    <ListItemAvatar>\n                        <Avatar alt=\"user\" src=\"https://www.selfstir.com/wp-content/uploads/2015/11/default-user.png\" />\n                    </ListItemAvatar>\n                    <ListItemText>\n                        <Typography\n                            className={classes.nickname}\n                            component=\"span\">\n                        {props.message.name} says \n                        </Typography>\n                        {' ' + props.message.text}\n                    </ListItemText>\n        </ListItem>\n    );\n}","import React from 'react';\nimport List from '@material-ui/core/List';\nimport { MessageListItem } from './MessageListItem';\nimport Typography from '@material-ui/core/Typography';\n\n/**\n * Component to display all of the chat messages. \n * @param {props} props from ChatWindow.jsx \n */\nexport function MessageList(props) {\n    return (\n        <List className={'message-list'}>\n            {\n                props.messages.length > 0 ?\n                    props.messages.map((message, index) =>\n                        <MessageListItem key={index} bottomMessageRef={props.bottomMessageRef} message={message} nickNameColor={message.name === props.nickname ? props.nickNameColor : 'orange'} />\n                    )\n                    : <Typography color=\"secondary\" variant=\"h5\" align=\"center\">No Messages to Display!</Typography>\n            }\n        </List>\n    );\n\n}","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport SendIcon from '@material-ui/icons/Send';\n\n/**\n * UI for entering in a text message. \n * @param {props} props from ChatWindow.jsx \n */\nexport function MessageInput(props) {\n\n    const handleChange = (inputType, event) => {\n        props.handleChange(inputType, event);\n    };\n\n    return (\n        <>\n            <Grid container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing={1}\n            >\n                <Grid item xs={7}>\n                    <TextField id=\"outlined-basic\" label=\"Enter message here\" variant=\"outlined\" size=\"small\" fullWidth onChange={e => handleChange('message', e)} />\n                </Grid>\n                <Grid item >\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        endIcon={<SendIcon />}\n                        onClick={() => props.sendMessage()}\n                    >\n                        Send\n                </Button>\n                </Grid>\n            </Grid>\n        </>\n    );\n}","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport './scss/chat-window-styles.scss';\n\n/**\n * Holds the text input to set the user's nickname. \n * @param {props} props from ChatWindow.jsx \n */\nexport function SetNickname(props) {\n\n    const handleChange = (inputType, event) => {\n        props.handleChange(inputType, event);\n    };\n\n    return (\n        <>\n            <Grid container\n                  direction=\"row\"\n                  justify=\"center\"\n                  alignItems=\"center\"\n                  spacing={4}\n                  >\n                  <Grid container item justify=\"center\">\n                <TextField className={\"nickname-field\"} label=\"Enter a nickname here\" variant=\"outlined\" size=\"small\" onChange={e => handleChange('nickname', e)} />\n                </Grid>\n                  <Grid item >\n                </Grid>\n            </Grid>\n        </>\n    );\n}","import React from 'react';\nimport { MessageList } from './MessageList';\nimport { MessageInput } from './MessageInput';\nimport {SetNickname} from './SetNickname';\nimport Grid from '@material-ui/core/Grid';\nimport './scss/chat-window-styles.scss';\nimport { Divider } from '@material-ui/core';\n\n/**\n * Contains chat window UI \n * @param {props} props from App.js \n */\nexport function ChatWindow(props) {\n    return (\n        <>\n            <Grid container\n                direction=\"column\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing={3}\n            >\n                <Grid container item xs={8}>\n                    <SetNickname handleChange={props.handleChange} />\n                </Grid>\n                <Divider className={'chat-divider'}/>\n                <Grid container justify=\"center\">\n                    {\n                            <MessageList  messages={props.messages} nickNameColor={props.nickNameColor} nickname={props.nickname} bottomMessageRef={props.bottomMessageRef}/>\n                    }\n                </Grid>\n                <Grid className={\"message-input\"} container item xs={12}>\n                    <MessageInput  handleChange={props.handleChange} sendMessage={props.sendMessage}/>\n                </Grid>\n            </Grid>\n        </>\n    );\n}","import React, { useState, useEffect, useRef } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport { ChatWindow } from './ChatWindow';\nimport './scss/chat-window-styles.scss';\n\n//const ENDPOINT = \"http://localhost:3000\";\nconst ENDPOINT = \"/\";\n\n/**\n * Main app component. \n */\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState('');\n  const [messageReceived, setMessageReceived] = useState(false);\n  const [nickname, setNickname] = useState('anonymous');\n  const [nickNameColor, setNickNameColor] = useState('#000000');\n\n  const bottomMessage = useRef(null);\n\n  // Handle input changes for nickname and messages\n  const handleChange = (inputType, event) => {\n    switch (inputType) {\n      case 'message':\n        setMessage(event.target.value);\n        break;\n      case 'nickname':\n        setNickname(event.target.value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  //Callback when the send message button is clicked\n  const sendMessage = () => {\n\n    let data = {\n      'name': nickname,\n      'message': message\n    }\n\n    const socket = socketIOClient(ENDPOINT);\n    socket.emit('message', data);\n }\n\n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT);\n\n    socket.on(\"receivedMessage\", data => {\n      setMessageReceived(false);\n      let updatedMessages = messages;\n      updatedMessages.push(data);\n      setMessages(updatedMessages);\n      setMessageReceived(true);\n    });\n\n    //Set random nickname color\n    setNickNameColor(getRandomColor());\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    console.log(\"new message\");\n    if (bottomMessage.current != null){\n      bottomMessage.current.scrollIntoView();\n    }\n  }, [messageReceived]);\n\n  return (\n    <div className=\"app-container\">\n      <h1>Amazing Real-Time Chat</h1>\n      <ChatWindow messages={messages} \n                  handleChange={handleChange} \n                  sendMessage={sendMessage}\n                  nickNameColor={nickNameColor}\n                  nickname={nickname}\n                  bottomMessageRef={bottomMessage}\n                  />\n    </div>\n  );\n}\n\n/**\n * Get a random hex color value.\n */\n  function getRandomColor() {\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}